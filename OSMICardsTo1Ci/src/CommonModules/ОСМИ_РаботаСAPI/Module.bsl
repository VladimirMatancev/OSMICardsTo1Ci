#Область  ВнутренниеФункции

Функция ОтправитьЗапрос(Метод,Ресурс,Параметры = "",ПараметрыПОСТ=Неопределено) 
	СтруктураОтвета = Новый  Структура;
	СтруктураОтвета.Вставить("Ответ");
	СтруктураОтвета.Вставить("ТекстОтвета");
	СтруктураОтвета.Вставить("Успех");
	СтруктураОтвета.Вставить("ОписаниеОшибки");
	СтруктураОтвета.Вставить("Статус");
	СтруктураОтвета.Вставить("Успех");

	СтруктураЗапроса = Новый Структура;
	СтруктураЗапроса.Вставить("Метод",Метод);
	СтруктураЗапроса.Вставить("Ресурс",Ресурс);
	СтруктураЗапроса.Вставить("Параметры",Параметры);
	СтруктураЗапроса.Вставить("ПараметрыПОСТ",ПараметрыПОСТ);
	
	
	СтрокаJS = Сериализовать(СтруктураЗапроса);
	
	ЗаписьЖурналаРегистрации(
	"ОСМИ.Отправка запроса",
	УровеньЖурналаРегистрации.Информация,
	,
	,СтрокаJS); 
			
	Попытка
		APIID  	= Константы.ОСМИ_APIID.Получить(); 
		APIKEY 	= Константы.ОСМИ_APIKEY.Получить();
		APIADDR = Константы.ОСМИ_APIADDR.Получить();
		
		ИспользоватьСертификат = Константы.ОСМИ_ИспользоватьСертификат.Получить();
		
		Если ИспользоватьСертификат Тогда
			ПутьКСертификату = Константы.ОСМИ_РасполажениеСертификата.Получить();
			Пароль = Константы.ОСМИ_ПарольОтСертификата.Получить();
			
			Запроc = Новый HTTPЗапрос("/v2c/" + Ресурс + ?(Параметры = "", "", "?" + Параметры));
			
			Если не ПараметрыПост = Неопределено Тогда
				Запроc.УстановитьТелоИзСтроки(СокрЛП(ПараметрыПОСТ));
			КонецЕсли;
			
			SSL =новый ЗащищенноеСоединениеOpenSSL(Новый СертификатКлиентаФайл(ПутьКСертификату,Пароль));
			Соед = Новый HTTPСоединение(APIADDR,443,,,,,SSL);
			Ответ = Соед.ВызватьHTTPМетод(Метод,Запроc); 
			
			СтруктураОтвета.Статус = Ответ.КодСостояния;		
			СтруктураОтвета.ТекстОтвета = Ответ.ПолучитьТелоКакСтроку();	
		Иначе
			WinHttp = Новый COMОбъект("WinHttp.WinHttpRequest.5.1");
			WinHttp.Option(2,"utf-8");
			WinHttp.Open(Метод, "https://" + APIADDR + "/v2/" + Ресурс + ?(Параметры = "", "", "?" + Параметры),0); 
			WinHTTP.setCredentials(APIID, APIKEY, 0);
			WinHttp.setRequestHeader("Content-type", "application/json;");
			
			Если ПараметрыПост = Неопределено Тогда
				WinHttp.Send();
			Иначе 
				WinHttp.Send(СокрЛП(ПараметрыПОСТ));
			КонецЕсли;
			
			СтруктураОтвета.Статус = WinHttp.Status;
			СтруктураОтвета.ТекстОтвета = WinHttp.ResponseText;
		КонецЕсли;
				
		Если СтруктураОтвета.Статус = 200 Тогда 			
			Чтение = Новый ЧтениеJSON;
			чтение.УстановитьСтроку(СтруктураОтвета.ТекстОтвета);
			Структура = ПрочитатьJSON(Чтение,,,,"ФункцияВосстановления",ОСМИ_ПовторноИспользуемый.МодульФункцииВосстановления());
			Чтение.Закрыть();
			
			СтруктураОтвета.Ответ = Структура;
			СтруктураОтвета.Успех = Истина;
			
			
			СтрокаJS = Сериализовать(СтруктураОтвета);	
			ЗаписьЖурналаРегистрации(
			"ОСМИ.Отправка запроса",
			УровеньЖурналаРегистрации.Информация,
			,
			,СтрокаJS);
		ИначеЕсли  СтруктураОтвета.Статус = 204 Тогда
						
			СтруктураОтвета.Ответ = Структура;
			СтруктураОтвета.Успех = Истина;
			
			
			СтрокаJS = Сериализовать(СтруктураОтвета);	
			ЗаписьЖурналаРегистрации(
			"ОСМИ.Отправка запроса",
			УровеньЖурналаРегистрации.Информация,
			,
			,СтрокаJS);

		Иначе
			СтруктураОтвета.ТекстОтвета =  СтруктураОтвета.ТекстОтвета;
			СтруктураОтвета.Успех = Ложь;			
			
			СтрокаJS = Сериализовать(СтруктураОтвета);	
			ЗаписьЖурналаРегистрации(
			"ОСМИ.Отправка запроса",
			УровеньЖурналаРегистрации.Ошибка,
			,
			,СтрокаJS);
		КонецЕсли; 
	Исключение
		ЗаписьЖурналаРегистрации("ОСМИ.Отправка запроса", 
		УровеньЖурналаРегистрации.Ошибка, , , 
		ОписаниеОшибки());
		СтруктураОтвета.Успех = Ложь;
		СтруктураОтвета.ОписаниеОшибки = ОписаниеОшибки();
	КонецПопытки;    
	СтруктураОтвета.Вставить("Запрос",СтруктураЗапроса);
	Возврат СтруктураОтвета;
	
КонецФункции

Функция ПутсуюСтрокуВAPI(Строка) 
	Если Строка = "" тогда
		Возврат "-empty-"
	КонецЕсли;
	Возврат Строка;
КонецФункции

Функция Сериализовать(Структура)
	СтрокаJS = "";
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON,Структура);
	СтрокаJS = ЗаписьJSON.Закрыть();
	
	Возврат СтрокаJS;
КонецФункции
#КонецОбласти

#Область  ЭкспортныеФункции
// Функция - Проверить подключение к сервису
// 
// Возвращаемое значение:
//  Структура - Возвращает структуру результата подключения к сервису, содержащую успешность выполнения и версию сервиса на сервере. 
//
Функция ПроверитьПодключениеКСервису() Экспорт
	Возврат ОтправитьЗапрос("GET","ping");	
КонецФункции

// Функция - Запросить информацию покарте
//
// Параметры:
//  СерийныйНомер			 - Строка - Серийный номер карты;
//  ДополнительнаяИнформация - Булево - Нужна ли в структуре возврата дополнительная информация
// 
// Возвращаемое значение:
//   - Структура
//
Функция ЗапроситьИнформациюПокарте(СерийныйНомер,ДополнительнаяИнформация = Ложь)  Экспорт 
	Параметры = "";                
	Если ДополнительнаяИнформация Тогда
		Параметры = "extendedInfo=ture";
	КонецЕсли;
	
	Возврат ОтправитьЗапрос("GET","passes/"+КодироватьСтроку(СокрЛП(СерийныйНомер),СпособКодированияСтроки.КодировкаURL),Параметры);	
КонецФункции

// Функция - Запросить список доступных шаблонов
//
// Параметры:
//  Статистика	 - Булево - нужна ли статистика по шаблонам
// 
// Возвращаемое значение:
//   - Структура 
//
Функция ЗапроситьСписокДоступныхШаблонов(Статистика = ложь) Экспорт
	Параметры = "";
	Если Статистика Тогда
		Параметры = "stats=ture";
	КонецЕсли;
	
	Возврат ОтправитьЗапрос("GET","templates",Параметры);		
КонецФункции

// Функция - Запросить информацию о шаблоне
//
// Параметры:
//  ИмяШаблона	 - Строка - Имя шаблона на сервере
// 
// Возвращаемое значение:
//   - Структура
//
Функция ЗапроситьИнформациюОШаблоне(ИмяШаблона) Экспорт
	Возврат ОтправитьЗапрос("GET","templates/"+КодироватьСтроку(ИмяШаблона,СпособКодированияСтроки.КодировкаURL));			
КонецФункции

// Функция - Создать карту
//
// Параметры:
//  СерийныйНомер		 - Строка - Серийный номер создаваемой карты
//  ИмяШаблона			 - Строка - Имя шаблона, по которому создается карта
//  ЗаполнитьЗначения	 - Булево - Нужно ли заполнять карту данными при создании
//  СтруктураКарты		 - Структура - нужно указывать только если ЗаполнитьЗначения = истина. Структура параметров карты, указываемых при создании
// 
// Возвращаемое значение:
//   - Структура 
//
Функция СоздатьКарту(СерийныйНомер,ИмяШаблона,ЗаполнитьЗначения = Ложь,СтруктураКарты = Неопределено) Экспорт
	СтруктураКартыJS = Сериализовать(СтруктураКарты);	
	
	Если ЗаполнитьЗначения Тогда
		Параметры = "withValues=true";
	КонецЕсли;
	
	Возврат ОтправитьЗапрос("POST","passes/"
	+	КодироватьСтроку(СокрЛП(СерийныйНомер),СпособКодированияСтроки.КодировкаURL) + "/" 
	+	КодироватьСтроку(СокрЛП(ИмяШаблона),СпособКодированияСтроки.КодировкаURL),Параметры,СтруктураКартыJS);		
КонецФункции

// Функция - Обновить значения карты
//
// Параметры:
//  СерийныйНомер	 - Строка - Серийный номер обновляемой карты	
//  СтруктураКарты	 - Структура - Данные, передаваемые на карту
//  ОтправлятьПуш	 - Булево - Нужно ли при обновлении отправлять пуш сообщение
// 
// Возвращаемое значение:
//   - Структура
//
Функция ОбновитьЗначенияКарты(СерийныйНомер,СтруктураКарты,ОтправлятьПуш = истина) Экспорт	
	СтруктураКартыJS = Сериализовать(СтруктураКарты);	
	
	Возврат ОтправитьЗапрос("PUT","passes/"	+ КодироватьСтроку(СокрЛП(СерийныйНомер),СпособКодированияСтроки.КодировкаURL)+ ?(ОтправлятьПуш,"/push","")
	,,СтруктураКартыJS);			
КонецФункции 

// Функция - Отправить пуш сообщение
//
// Параметры:
//  всеКарты		 - Булево - отправлять сообщение на все карты 
//  СерийныеНомера	 - Массив - Массив номер карт получателей сообения 
//  шаблоны			 - Массив - Массив имен шаблонов, на карты которых отправлять сообщение  
//  датаНачала		 - Дата - Дата, после которой будет отправлено сообщение 
//  сообщение		 - Строка - Текст сообщения
// 
// Возвращаемое значение:
//   - Структура
//
Функция ОтправитьПушСообщение(всеКарты = ложь,СерийныеНомера = Неопределено,шаблоны = Неопределено, датаНачала = Неопределено,сообщение) Экспорт
	              
	СтруктураПараметров = новый Структура;
	
	СтруктураПараметров.Вставить("message",сообщение);
	Если всеКарты Тогда 
		СтруктураПараметров.Вставить("allCards",всеКарты);
	ИначеЕсли не СерийныеНомера = Неопределено Тогда
		МассивСН = новый Массив;
		Для Каждого Сн из СерийныеНомера Цикл
			МассивСН.Добавить(СокрЛП(Сн));
		КонецЦикла;
		СтруктураПараметров.Вставить("serials",МассивСН);
	ИначеЕсли не шаблоны = Неопределено Тогда
		МассивШБ = новый Массив;
		Для Каждого шб из шаблоны Цикл
			МассивСН.Добавить(шб);
		КонецЦикла;
		СтруктураПараметров.Вставить("serials",МассивШБ);
	КонецЕсли;
	Если ЗначениеЗаполнено(датаНачала) Тогда
		СтруктураПараметров.Вставить("start",Формат(УниверсальноеВремя(датаНачала, ЧасовойПояс()),"ДФ=гггг-ММ-ддTЧЧ:мм:ссZ"));
	КонецЕсли;                                              	
	
	
	СтруктураКартыJS = Сериализовать(СтруктураПараметров);
	
	
	Структура = ОтправитьЗапрос("POST","marketing/pushmessage",,СтруктураКартыJS);
	возврат Структура;			
КонецФункции

// Функция - Отправить динамическую акцию
//
// Параметры:
//  всеКарты		 - Булево - Отправлять акцию на все карты 
//  СерийныеНомера	 - Массив - Список карт на которые отправлять акцию
//  шаблоны			 - Массив - Список шаблонов, на карты которых отправлять акцию
//  датаНачала		 - Дата - Дата начала отображения акции
//  ДатаЗавершения	 - Дата - Дата завершения отображения акции
//  Заголовок		 - Строка - Заголовок поля акции
//  ТекстПоля		 - Строка - Текст поля акции
//  сообщение		 - Строка - Текст пуш сообщения 
//  Картинка		 - Строка - Фоновая картинка карты, устанавливаемая на время действия акции
//  ЦветЗаголовков	 - Строка - Цвет текста заголовка акции в формате html
//  ЦветТекста		 - Строка - Цвет текста акции в формате html
//  ЦветФона		 - Строка - Цвет фона карты, устанавливаемая на время действия акции
// 
// Возвращаемое значение:
//   - Структура
//
Функция ОтправитьДинамическуюАкцию(
	
			всеКарты = ложь,
			СерийныеНомера = Неопределено,
			шаблоны = Неопределено, 
			датаНачала = Неопределено,
			ДатаЗавершения = Неопределено,
			Заголовок = неопределено,
			ТекстПоля="-empty-",
			сообщение = Неопределено,
			
			Картинка = "-empty-",
			ЦветЗаголовков = "-empty-",
			ЦветТекста = "-empty-",
			ЦветФона = "-empty-"
		) Экспорт
		
	СтруктураПараметров = новый Структура;
	Если ЗначениеЗаполнено(датаНачала) Тогда	
		СтруктураПараметров.Вставить("start",Формат(УниверсальноеВремя(датаНачала, ЧасовойПояс()),"ДФ=гггг-ММ-ддTЧЧ:мм:ссZ"));
	КонецЕсли;
	Если ЗначениеЗаполнено(ДатаЗавершения) Тогда	
		СтруктураПараметров.Вставить("end",Формат(УниверсальноеВремя(ДатаЗавершения, ЧасовойПояс()),"ДФ=гггг-ММ-ддTЧЧ:мм:ссZ"));
	КонецЕсли;
	Если ЗначениеЗаполнено(Заголовок) Тогда
		СтруктураПараметров.Вставить("label",Заголовок);
		
	КонецЕсли;

	СтруктураПараметров.Вставить("body",ТекстПоля);
	
	
	СтруктураПараметров.Вставить("image",Картинка);
	
	Цвета = Новый Структура;
	Цвета.Вставить("label",ПутсуюСтрокуВAPI(ЦветЗаголовков));
	Цвета.Вставить("foreground",ПутсуюСтрокуВAPI(ЦветТекста));
	Цвета.Вставить("background",ПутсуюСтрокуВAPI(ЦветФона));
	
	СтруктураПараметров.Вставить("colors",Цвета);

	Если ЗначениеЗаполнено(сообщение) Тогда
		СтруктураПараметров.Вставить("message",сообщение);		
	КонецЕсли;	
		
	Если всеКарты Тогда 
		СтруктураПараметров.Вставить("allCards",всеКарты);
	ИначеЕсли не СерийныеНомера = Неопределено Тогда
		СтруктураПараметров.Вставить("serials",СерийныеНомера);
	ИначеЕсли не шаблоны = Неопределено Тогда
		МассивШБ = новый Массив;
		Для Каждого шб из шаблоны Цикл
			МассивШБ.Добавить(шб);
		КонецЦикла;
		СтруктураПараметров.Вставить("serials",МассивШБ);
	КонецЕсли;
	
	Структура = ОтправитьЗапрос("POST","marketing/pushaction",,Сериализовать(СтруктураПараметров));
	возврат Структура;		
КонецФункции

// Функция - Обновить значения шаблона
//
// Параметры:
//  ИмяШаблона		 - Строка - Имя обновляемого шаблона
//  СтруктураДанных	 - Структура - Структура обновляемого шаблона
//  ОтправитьПуш	 - Булево - Отправлять ли на карты шаблона пуш сообщение с изменениями в шаблоне
// 
// Возвращаемое значение:
//   - Структура 
//
Функция ОбновитьЗначенияШаблона(ИмяШаблона,СтруктураДанных,ОтправитьПуш = ложь) Экспорт
	Возврат ОтправитьЗапрос("PUT","templates/"+КодироватьСтроку(СокрЛП(ИмяШаблона),СпособКодированияСтроки.КодировкаURL)+ 
	?(ОтправитьПуш,"/push","")	
	,,Сериализовать(СтруктураДанных));	
КонецФункции

// Функция - Сменить шаблон
//
// Параметры:
//  СерийныйНомер	 - Строка - Серийный номер карты который хотите перевести на другой шаблон
//  Шаблон			 - Строка - Имя шаблона на который хотите перевести карту
// 
// Возвращаемое значение:
//   - Структура
//
Функция СменитьШаблон(СерийныйНомер,Шаблон) Экспорт
	возврат ОтправитьЗапрос("PUT","passes/move/"+КодироватьСтроку(СокрЛП(СерийныйНомер),СпособКодированияСтроки.КодировкаURL)
	+"/"+КодироватьСтроку(Шаблон,СпособКодированияСтроки.КодировкаURL)+"/push");	
КонецФункции

// Функция - Получить список доступных графических файлов
// 
// Возвращаемое значение:
//   - Структура
//
Функция ПолучитьСписокДоступныхГрафическихФайлов() Экспорт
	возврат ОтправитьЗапрос("GET","images");	
КонецФункции

// Функция - Запросить информацию о графическом файле из библиотеки
//
// Параметры:
//  IDКартинки	 - Строка - Идентификатор картинки
// 
// Возвращаемое значение:
//   - Струкутра
//
Функция ЗапроситьИнформациюОГрафическомФайлеИзБиблиотеки(IDКартинки) Экспорт
	возврат ОтправитьЗапрос("GET","images/"+КодироватьСтроку(СокрЛП(IDКартинки),СпособКодированияСтроки.КодировкаURL)+"/data");		
КонецФункции

// Функция - Добавить новый графический файл
//
// Параметры:
//  Тип	 - Перечисления.ОСМИ_ТипыКартинок - Тип картинки. 
//  Имя	 - Строка - Имя картинки
//  ДД	 - ДвоичныеДанные - Данные картинки 
// 
// Возвращаемое значение:
//   - Струкутра
//
Функция ДобавитьНовыйГрафическийФайл(Тип,Имя,ДД) Экспорт
	ЗначениеПеречисления = Тип;
	ИмяПеречисления = ЗначениеПеречисления.Метаданные().Имя;	
	ИндексЗначенияПеречисления = Перечисления[ИмяПеречисления].Индекс(ЗначениеПеречисления);	
	ИмяЗначенияПеречисления = Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;	
	Структура = Новый Структура;
	Структура.Вставить("imgType",ИмяЗначенияПеречисления);
	Структура.Вставить("imgDescription",Имя);
	Структура.Вставить("imgData",ДД);		
	Возврат ОтправитьЗапрос("POST",	"images",,Сериализовать(Структура));		
КонецФункции

// Функция - Отправить по СМС
//
// Параметры:
//  СерийныйНомер	 - Строка - Серийный номер карты отправляемый по СМС 
//  Телефон			 - Строка - Номер телефона
// 
// Возвращаемое значение:
//   - Струкутра
//
Функция ОтправитьПоСМС(СерийныйНомер,Телефон) Экспорт		
	Возврат ОтправитьЗапрос("GET","passes/"
	+КодироватьСтроку(СокрЛП(СерийныйНомер),СпособКодированияСтроки.КодировкаURL)+"/sms/"
	+КодироватьСтроку(СтрЗаменить(Телефон," ",""),СпособКодированияСтроки.КодировкаURL));	
КонецФункции

// Функция - Отправить по почте
//
// Параметры:
//  СерийныйНомер	 - Строка - Серийный номер карты отправляемый по электронной почте. 
//  Почта			 - Строка - Адрес электронной почты, на который отправляется карты
// 
// Возвращаемое значение:
//   - Струкутра
//
Функция ОтправитьПоПочте(СерийныйНомер,Почта) Экспорт
	Возврат ОтправитьЗапрос("POST","passes/"
	+КодироватьСтроку(СокрЛП(СерийныйНомер),СпособКодированияСтроки.КодировкаURL)+"/email/"
	+КодироватьСтроку(СтрЗаменить(Почта," ",""),СпособКодированияСтроки.КодировкаURL));
КонецФункции

// Функция - Получить список групп
// 
// Возвращаемое значение:
//   - Струкутра
//
Функция ПолучитьСписокГрупп() Экспорт
	возврат ОтправитьЗапрос("GET","registration/groups"); // ;	
КонецФункции

// Функция - Удалить регситрацию
//
// Параметры:
//  МассивКарт	 - Массив - Массив серийных номеров 
// 
// Возвращаемое значение:
//   - Струкутра 
//
Функция УдалитьРегиcтрацию(МассивКарт) Экспорт
	Структура = новый Структура;
	Структура.Вставить("registrations",МассивКарт);
	СтрокаПараметров = Сериализовать(Структура);
	Возврат ОтправитьЗапрос("POST","registration/deletedata",,СтрокаПараметров); 				
КонецФункции

// Функция - Получить список зарегистрированных карт
//
// Параметры:
//  Группа	 - Строка - мя регистрационной группы
// 
// Возвращаемое значение:
//   - Структура
//
Функция ПолучитьСписокЗарегистрированныхКарт(Группа) Экспорт
	Возврат ОтправитьЗапрос("GET","registration/data/"+КодироватьСтроку(СокрЛП(Группа),СпособКодированияСтроки.КодировкаURL)); 		
КонецФункции

// Функция - Получить статус доставки пуш сообщения (возвращает последнюю дату получения телефоном карты)
//
// Параметры:
//  Дата		 - Дата - Дата, после которой проверяется статус доставки
//  НомерКарты	 - Строка - Номер проверяемой карты
// 
// Возвращаемое значение:
//   - Структура
//
Функция ПолучитьСтатусДоставкиПушСообщения(Дата= Неопределено,НомерКарты=Неопределено) Экспорт
	Параметры = "";
	Если ЗначениеЗаполнено(Дата) Тогда	
		Параметры = Параметры + "start="+Формат(УниверсальноеВремя(Дата, ЧасовойПояс()),"ДФ=гггг-ММ-ддTЧЧ:мм:ссZ");
	КонецЕсли;
	Если ЗначениеЗаполнено(НомерКарты) Тогда	
		Параметры = Параметры + "serialNo=" + КодироватьСтроку(СокрЛП(НомерКарты),СпособКодированияСтроки.КодировкаURL);
	КонецЕсли;
	

	Возврат ОтправитьЗапрос("GET","stats/delivery",Параметры);
		
КонецФункции

// Функция - Получить список настроенных событиый
// 
// Возвращаемое значение:
//   - Структура
//
функция ПолучитьСписокНастроенныхСобытиый() Экспорт
	Возврат ОтправитьЗапрос("GET","events");	
КонецФункции

// Функция - Установить новое событие
//
// Параметры:
//  Метод			 - Строка - HTTP Метод 
//  Адрес			 - Строка - Адрес веб/http сервиса
//  ИмяПользователя	 - Строка - Имя пользователя для авторизации на сервисе
//  Пароль			 - Строка - Пароль пользователя для авторизации на сервисе 
//  Порт			 - Строка - Порт веб сервера
//  Событие			 - Строка - Идентификатор события
// 
// Возвращаемое значение:
//   - Структура
//
Функция УстановитьНовоеСобытие(Метод,Адрес,ИмяПользователя,Пароль,Порт,Событие) Экспорт
	ПараметрыПост = Новый Структура;
	
	ПараметрыПост.Вставить("method",Метод);
	ПараметрыПост.Вставить("url",Адрес);
	ПараметрыПост.Вставить("user",ИмяПОльзователя);
	ПараметрыПост.Вставить("password",Пароль);
	ПараметрыПост.Вставить("port",Порт);	

	Возврат ОтправитьЗапрос("POST","events/"+Событие,,Сериализовать(ПараметрыПост));
КонецФункции
#КонецОбласти

